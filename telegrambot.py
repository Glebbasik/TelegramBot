import telebot
from telebot import types
from telebot import apihelper
import sqlite3
import re
import time 
import logging
from datetime import datetime, timedelta
from dotenv import load_dotenv
import os
from pathlib import Path
import threading
from threading import Lock
#*–¢—É—Ç –≤—Å–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏*#
env_path = Path(__file__).parent / "bot.env"
load_dotenv(env_path)
bot = telebot.TeleBot(os.environ["TOKEN"])
apihelper.delete_webhook(bot.token)
db_lock = Lock()
conn = sqlite3.connect('BD_for_telegram_bot.db', check_same_thread=False)
cur = conn.cursor()
cur.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        username TEXT,
        password TEXT,
        class_number TEXT,
        class_letter TEXT)
''')
conn.commit()

cur.execute('''
    CREATE TABLE IF NOT EXISTS anonymous_questions (
        question_id INTEGER PRIMARY KEY AUTOINCREMENT,
        from_user_id INTEGER,
        to_teacher_id INTEGER,
        question_text TEXT,
        timestamp DATETIME DEFAULT CURRENT_TIMESTAMP,
        is_answered BOOLEAN DEFAULT 0,
        answer_text TEXT
    )
''')
conn.commit()

logger = logging.getLogger(__name__)
logger.setLevel(logging.DEBUG)  # –õ–æ–≤–∏–º –¥–∞–∂–µ DEBUG —Å–æ–æ–±—â–µ–Ω–∏—è

# –°–æ–∑–¥–∞—ë–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)  # –í –∫–æ–Ω—Å–æ–ª—å —Ç–æ–ª—å–∫–æ INFO –∏ –≤—ã—à–µ

# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
formatter = logging.Formatter(
    '%(asctime)s\n--- %(levelname)s ----\n%(message)s',  # –î–æ–±–∞–≤–∏–ª–∏ asctime
    datefmt='%Y/%m/%d %H:%M:%S'  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
)
console_handler.setFormatter(formatter)
logger.addHandler(console_handler)
user_states = {}

def check_registration(func):
    def wrapper(message):
        user_id = message.from_user.id
        with db_lock:
            cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            user_data = cur.fetchone()
        if user_data is None or user_data[3] is None or user_data[4] is None:
            bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start</b>", parse_mode="HTML")
            return
        return func(message)
    return wrapper

def is_teacher(user_id):
    with db_lock:
        cur.execute("SELECT class_number FROM users WHERE user_id = ?", (user_id,))
        result = cur.fetchone()
    if result and '_id' in result[0]:
        return True
    return False

#–ö–æ–º–∞–Ω–¥–∞ /start   
@bot.message_handler(commands=['start'])
def main_start(message):
    user_id = message.from_user.id
    hour = datetime.now().hour
    stiker_day = "CAACAgIAAxkBAAEOHYxn8kxlp5bYBtPFWysqWJfvY6s08AAChwIAAladvQpC7XQrQFfQkDYE"
    stiker_evening = "CAACAgIAAxkBAAENsl5n3uJz91ELhaAbvdExcighKaLHVQADKwACXTlgSeFvhT8xkv9ENgQ"
    stiker_night = "CAACAgIAAxkBAAENslJn3uIeXXiUIm0gigSgk0wehvvrfQACTyMAAtAZMEgpYDBIIoBMvTYE"
    stiker_morning = "CAACAgIAAxkBAAEN0n9n5D7j7cx0oCTQgnooixX3UtWHXAACIQ0AAiWx6UpCBrcao52KeDYE"
    with db_lock:
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = cur.fetchone()

    if user_data:
        if user_data[2] != None and user_data[3] != None and user_data[4] != None: 
            if 6 <= hour < 12:
                bot.send_message(message.chat.id, f"<b>–£—Ç—Ä–æ –¥–æ–±—Ä–æ–µ! üåÖ {message.from_user.first_name}</b>", parse_mode="HTML")
                bot.send_sticker(message.chat.id, stiker_morning)
            elif 12 <= hour < 18:
                bot.send_message(message.chat.id, f"<b>–î–æ–±—Ä–æ–≥–æ –¥–Ω—è! üåû {message.from_user.first_name}</b>", parse_mode="HTML")
                bot.send_sticker(message.chat.id, stiker_day)
            elif 18 <= hour <= 23:
                bot.send_message(message.chat.id, f"<b>–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåô {message.from_user.first_name}</b>", parse_mode="HTML")
                bot.send_sticker(message.chat.id, stiker_evening)
            else:
                bot.send_message(message.chat.id, f"<b>–î–æ–±—Ä–æ–π –Ω–æ—á–∏! üåô {message.from_user.first_name}</b>", parse_mode="HTML")
                bot.send_sticker(message.chat.id, stiker_night)
        else:
            bot.send_message(message.chat.id, "<b>–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–æ –∫–æ–Ω—Ü–∞üò§</b>", parse_mode="HTML")
            register_class_id(message=message, accepted_message_id=None)
    else:
        bot.send_message(message.chat.id, f"<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {message.from_user.first_name}!</b>‚ú®\n"
                                        "<b>–ü—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éü•∞</b>", parse_mode="HTML")
        bot.send_sticker(message.chat.id, stiker_day)
        
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_1 = types.InlineKeyboardButton('–í–æ–π—Ç–∏ –∫–∞–∫ —É—á–µ–Ω–∏–∫', callback_data='study_user')
        btn_2 = types.InlineKeyboardButton('–í–æ–π—Ç–∏ –∫–∞–∫ —É—á–∏—Ç–µ–ª—å', callback_data='teacher_user')
        markup.add(btn_1, btn_2)
        bot.send_message(message.chat.id, "<b>–î–∞–≤–∞–π—Ç–µ –Ω–∞—á–Ω—ë–º! –ö–∞–∫ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤–æ–π—Ç–∏?</b>", reply_markup=markup, parse_mode="HTML")
# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∞—â–µ–≥–æ—Å—è 
@bot.callback_query_handler(func=lambda call: call.data == 'study_user')
def handle_button(call):
    try:
        bot.answer_callback_query(call.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id-1)
        bot.delete_message(call.message.chat.id, call.message.message_id-2)
        reg_new_name(call.message)
    except Exception as exp:
        logger.error(e)
def reg_new_name(message):
    try:
        bot.send_message(message.chat.id, "<b>–ü—Ä–∏–¥—É–π–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—åüòÄ:</b>", parse_mode="HTML")
        bot.register_next_step_handler(message, lambda msg: password_new(msg))
    except Exception:
        logger.error(e)
def password_new(message):
    password = message.text.strip()
    pattern = r"^[A-Z][A-Za-z0-9@#$%^&+=]{7,}$"
    user_id = message.from_user.id
    if password in ("/start", "/clear", "/help", "/reference", "/exit", "/calendar", "/support", '/ask_anon', '/my_questions', '/send_class'):
        bot.send_message(message.chat.id, "<b>–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ /startüòä</b>", parse_mode="HTML")
        return
    elif re.fullmatch(pattern ,password):
        try:
            with db_lock:
                cur.execute("INSERT INTO users (user_id, username, password, class_number, class_letter) VALUES (?, ?, ?, ?, ?)", (user_id, message.from_user.first_name, password, None, None))
                conn.commit()
            sent_message = bot.send_message(message.chat.id, "<b>–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! üéâ</b>", parse_mode="HTML")        
            register_class_id(message, accepted_message_id=sent_message.message_id)
        except Exception:
            logger.error(e)
    else:
        bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAENs7Fn3xUuEgn_WhAFdrvFP5oAAR9kmw4AAr0cAAJHONBKJuWKeGhBF-02BA")
        time.sleep(1)
        bot.send_message(message.chat.id, "<b>‚ùå–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø–∞—Ä–æ–ª—å‚ùå! –ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω:</b>\n"
                                        "- –ù–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –∑–∞–≥–ª–∞–≤–Ω–æ–π –±—É–∫–≤—ã üî†\n"
                                        "- –°–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ –ª–∞—Ç–∏–Ω—Å–∫–∏—Ö –±—É–∫–≤\n"
                                        "- –°–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã\n"
                                        "- –ë—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 8 —Å–∏–º–≤–æ–ª–æ–≤ ‚è≥\n"
                                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:", parse_mode="HTML")
        bot.register_next_step_handler(message, lambda msg: password_new(msg))
def register_class_id(message, accepted_message_id):
    wait_message = bot.send_message(message.chat.id, "<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É...</b>", parse_mode="HTML")
    
    time.sleep(2)
    
    try:
        bot.delete_message(message.chat.id, accepted_message_id)  # –£–¥–∞–ª—è–µ–º "–ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! üéâ"
        bot.delete_message(message.chat.id, wait_message.message_id)  # –£–¥–∞–ª—è–µ–º "–ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É..."
    except Exception:
        logger.error(e)
    
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_1 = types.InlineKeyboardButton("5 –∫–ª–∞—Å—Åüîπ", callback_data="class_5")
    btn_2 = types.InlineKeyboardButton("6 –∫–ª–∞—Å—Åüîπ", callback_data="class_6")
    btn_3 = types.InlineKeyboardButton("7 –∫–ª–∞—Å—Åüîπ", callback_data="class_7")
    btn_4 = types.InlineKeyboardButton("8 –∫–ª–∞—Å—Åüîπ", callback_data="class_8")
    btn_5 = types.InlineKeyboardButton("9 –∫–ª–∞—Å—Åüîπ", callback_data="class_9")
    btn_6 = types.InlineKeyboardButton("10 –∫–ª–∞—Å—Åüîπ", callback_data="class_10")
    btn_7 = types.InlineKeyboardButton("11 –∫–ª–∞—Å—Åüîπ", callback_data="class_11")
    markup.add(btn_1, btn_2, btn_3, btn_4, btn_5, btn_6, btn_7)
    bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –≤—ã —É—á–∏—Ç–µ—Å—åüòâ</b>", parse_mode="HTML", reply_markup=markup)

#–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—á–∏—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data == 'teacher_user')
def handle_button_teacher(call):
    try:
        bot.answer_callback_query(call.id)
        bot.delete_message(call.message.chat.id, call.message.message_id)
        bot.delete_message(call.message.chat.id, call.message.message_id-1)
        bot.delete_message(call.message.chat.id, call.message.message_id-2)
        reg_new_teacher(call.message)
    except Exception as exp:
        logger.error(e)
def reg_new_teacher(message):
    try:
        bot.send_message(message.chat.id, "<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π IDüòÄ:</b>", parse_mode="HTML")
        bot.register_next_step_handler(message, lambda msg: password_new_teacher(msg))
    except Exception:
        logger.error(e)
def password_new_teacher(message):
    password = message.text.strip()
    user_id = message.from_user.id
    password_teachers = {
    5: {"–ê": "a7b3c9d2e1", "–ë": "f4g6h8j0k5", "–í": "l2m4n6p8q0", "–ì": "xk8d3m9p2q", "–î": "r1s3t5u7v9"},
    6: {"–ê": "w2x4y6z8a0", "–ë": "b3c5d7e9f1", "–í": "g4h6j8k0l2", "–ì": "m5n7p9q1r3"},
    7: {"–ê": "s6t8u0v2w4", "–ë": "x7y9z1a3b5", "–í": "c8d0e2f4g7", "–ì": "h9j1k3l5m8"},
    8: {"–ê": "n0p2q4r6s9", "–ë": "t3u5v7w9x1", "–í": "y4z6a8b0c2", "–ì": "d5e7f9g1h3"},
    9: {"–ê": "i6j8k0l2m4", "–ë": "n7o9p1q3r5", "–í": "s8t0u2v4w6", "–ì": "x9y1z3a5b7"},
    10: {"–ê": "c8d0e2f4g6", "–ë": "h9j1k3l5m7"},
    11: {"–ê": "n0p2q4r6s8", "–ë": "t3u5v7w9x9"}
    }
    with db_lock:
        cur.execute("""
            SELECT user_id FROM users 
            WHERE password = ?
            """, (password,))
        existing_teacher = cur.fetchone()
    
    found = any(
        password in class_letters.values()
        for class_letters in password_teachers.values()
    )

    if existing_teacher and found:
        bot.send_message(
            chat_id=message.chat.id,
            text="<b>‚ùå –£—á–∏—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! ‚ùå</b>\n"
            "<b>–ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É</b>",
            parse_mode='HTML'
        )
        return
    result = next(((n, l) for n, letters in password_teachers.items() 
            for l, p in letters.items() if p == password), None)
    
    if password in ("/start", "/clear", "/help", "/reference", "/exit", "/calendar", "/support", '/ask_anon', '/my_questions', '/send_class'):
        bot.send_message(message.chat.id, "<b>–û–π, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –ø—Ä–µ—Ä–≤–∞–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é. –î–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º –µ—â—ë —Ä–∞–∑ /startüòä</b>", parse_mode="HTML")
        return
    elif result is not None:
        try:
            class_number, class_letter = result
            with db_lock:
                cur.execute("INSERT INTO users (user_id, username, password, class_number, class_letter) VALUES (?, ?, ?, ?, ?)", (user_id, message.from_user.first_name, password, f"{class_number}_id", class_letter))
                conn.commit()
            register_class_teacher(message=message)
        except Exception:
            logger.error(e)
    else:
        bot.send_sticker(message.chat.id, "CAACAgIAAxkBAAENs7Fn3xUuEgn_WhAFdrvFP5oAAR9kmw4AAr0cAAJHONBKJuWKeGhBF-02BA")
        time.sleep(1)
        bot.send_message(message.chat.id, "<b>‚ùå–ù–µ–≤–µ—Ä–Ω—ã–π ID‚ùå</b>"
                                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞üòâ", parse_mode="HTML")
        bot.register_next_step_handler(message, lambda msg: password_new_teacher(msg))


def register_class_teacher(message):
    wait_message = bot.send_message(message.chat.id, "<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É...</b>", parse_mode="HTML")
    
    time.sleep(2)
    
    try:
        bot.delete_message(message.chat.id, wait_message.message_id)  # –£–¥–∞–ª—è–µ–º "–ü–æ–¥–æ–∂–¥–∏—Ç–µ —Å–µ–∫—É–Ω–¥—É..."
        bot.send_message(message.chat.id, '<b>–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –∫–∞–∫ —É—á–∏—Ç–µ–ª—åüòÄ</b>', parse_mode="HTML")
        with db_lock:
            cur.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,))
            list_user = cur.fetchone()
        logger.info(f"–£—á–∏—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è: {list_user}")
    except Exception:
        logger.error(e)

@bot.callback_query_handler(func=lambda call: call.data == "class_5")
def class_5_call(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_number = ? WHERE user_id = ?", ('5', call.from_user.id))
        conn.commit()
    markup = types.InlineKeyboardMarkup(row_width=2)
    but_1 = types.InlineKeyboardButton("–êüîπ", callback_data="class_a")
    but_2 = types.InlineKeyboardButton("–ëüîπ", callback_data="class_b")
    but_3 = types.InlineKeyboardButton("–íüîπ", callback_data="class_v")
    but_4 = types.InlineKeyboardButton("–ìüîπ", callback_data="class_g")
    but_5 = types.InlineKeyboardButton("–îüîπ", callback_data="class_d")
    back_btn = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_button")
    markup.add(but_1, but_2, but_3, but_4, but_5)
    markup.add(back_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "class_6")
def class_5_call(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_number = ? WHERE user_id = ?", ('6', call.from_user.id))
        conn.commit()
    markup = types.InlineKeyboardMarkup(row_width=2)
    but_1 = types.InlineKeyboardButton("–êüîπ", callback_data="class_a")
    but_2 = types.InlineKeyboardButton("–ëüîπ", callback_data="class_b")
    but_3 = types.InlineKeyboardButton("–íüîπ", callback_data="class_v")
    but_4 = types.InlineKeyboardButton("–ìüîπ", callback_data="class_g")
    back_btn = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_button")
    markup.add(but_1, but_2, but_3, but_4)
    markup.add(back_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "class_7")
def class_5_call(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_number = ? WHERE user_id = ?", ('7', call.from_user.id))
        conn.commit()
    markup = types.InlineKeyboardMarkup(row_width=2)
    but_1 = types.InlineKeyboardButton("–êüîπ", callback_data="class_a")
    but_2 = types.InlineKeyboardButton("–ëüîπ", callback_data="class_b")
    but_3 = types.InlineKeyboardButton("–íüîπ", callback_data="class_v")
    but_4 = types.InlineKeyboardButton("–ìüîπ", callback_data="class_g")
    back_btn = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_button")
    markup.add(but_1, but_2, but_3, but_4)
    markup.add(back_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "class_8")
def class_5_call(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_number = ? WHERE user_id = ?", ('8', call.from_user.id))
        conn.commit()
    markup = types.InlineKeyboardMarkup(row_width=2)
    but_1 = types.InlineKeyboardButton("–êüîπ", callback_data="class_a")
    but_2 = types.InlineKeyboardButton("–ëüîπ", callback_data="class_b")
    but_3 = types.InlineKeyboardButton("–íüîπ", callback_data="class_v")
    but_4 = types.InlineKeyboardButton("–ìüîπ", callback_data="class_g")
    back_btn = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_button")
    markup.add(but_1, but_2, but_3, but_4)
    markup.add(back_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "class_9")
def class_5_call(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_number = ? WHERE user_id = ?", ('9', call.from_user.id))
        conn.commit()
    markup = types.InlineKeyboardMarkup(row_width=2)
    but_1 = types.InlineKeyboardButton("–êüîπ", callback_data="class_a")
    but_2 = types.InlineKeyboardButton("–ëüîπ", callback_data="class_b")
    but_3 = types.InlineKeyboardButton("–íüîπ", callback_data="class_v")
    but_4 = types.InlineKeyboardButton("–ìüîπ", callback_data="class_g")
    back_btn = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_button")
    markup.add(but_1, but_2, but_3, but_4)
    markup.add(back_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "class_10")
def class_5_call(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_number = ? WHERE user_id = ?", ('10', call.from_user.id))
        conn.commit()
    markup = types.InlineKeyboardMarkup(row_width=2)
    but_1 = types.InlineKeyboardButton("–êüîπ", callback_data="class_a")
    but_2 = types.InlineKeyboardButton("–ëüîπ", callback_data="class_b")
    back_btn = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_button")
    markup.add(but_1, but_2)
    markup.add(back_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "class_11")
def class_5_call(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_number = ? WHERE user_id = ?", ('11', call.from_user.id))
        conn.commit()
    markup = types.InlineKeyboardMarkup(row_width=2)
    but_1 = types.InlineKeyboardButton("–êüîπ", callback_data="class_a")
    but_2 = types.InlineKeyboardButton("–ëüîπ", callback_data="class_b")
    back_btn = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_button")
    markup.add(but_1, but_2)
    markup.add(back_btn)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –±—É–∫–≤—É –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )






@bot.callback_query_handler(func=lambda call: call.data == "class_a")
def call_class_a(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_letter = ? WHERE user_id = ?", ('–ê', call.from_user.id))
        conn.commit()
    user_id = call.from_user.id
    with db_lock:
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = cur.fetchone()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data}")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòä</b>",
        parse_mode="HTML"
    )
@bot.callback_query_handler(func=lambda call: call.data == "class_b")
def call_class_a(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_letter = ? WHERE user_id = ?", ('–ë', call.from_user.id))
        conn.commit()
    user_id = call.from_user.id
    with db_lock:
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = cur.fetchone()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data}")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòä</b>",
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda call: call.data == "class_v")
def call_class_a(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_letter = ? WHERE user_id = ?", ('–í', call.from_user.id))
        conn.commit()
    user_id = call.from_user.id
    with db_lock:
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = cur.fetchone()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data}")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòä</b>",
        parse_mode="HTML"
    )
    
@bot.callback_query_handler(func=lambda call: call.data == "class_g")
def call_class_a(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_letter = ? WHERE user_id = ?", ('–ì', call.from_user.id))
        conn.commit()
    user_id = call.from_user.id
    with db_lock:
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = cur.fetchone()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data}")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòä</b>",
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda call: call.data == "class_d")
def call_class_a(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_letter = ? WHERE user_id = ?", ('–î', call.from_user.id))
        conn.commit()
    user_id = call.from_user.id
    with db_lock:
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = cur.fetchone()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {user_data}")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–û—Ç–ª–∏—á–Ω–æ, —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æüòä</b>",
        parse_mode="HTML"
    )



@bot.callback_query_handler(func=lambda call: call.data == "back_button")
def back_class_button(call):
    bot.answer_callback_query(call.id)
    with db_lock:
        cur.execute("UPDATE users SET class_number = ? WHERE user_id = ?", (None, call.from_user.id))
        conn.commit()
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn_1 = types.InlineKeyboardButton("5 –∫–ª–∞—Å—Åüîπ", callback_data="class_5")
    btn_2 = types.InlineKeyboardButton("6 –∫–ª–∞—Å—Åüîπ", callback_data="class_6")
    btn_3 = types.InlineKeyboardButton("7 –∫–ª–∞—Å—Åüîπ", callback_data="class_7")
    btn_4 = types.InlineKeyboardButton("8 –∫–ª–∞—Å—Åüîπ", callback_data="class_8")
    btn_5 = types.InlineKeyboardButton("9 –∫–ª–∞—Å—Åüîπ", callback_data="class_9")
    btn_6 = types.InlineKeyboardButton("10 –∫–ª–∞—Å—Åüîπ", callback_data="class_10")
    btn_7 = types.InlineKeyboardButton("11 –∫–ª–∞—Å—Åüîπ", callback_data="class_11")
    markup.add(btn_1, btn_2, btn_3, btn_4, btn_5, btn_6, btn_7)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ, –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ –≤—ã —É—á–∏—Ç–µ—Å—åüòâ</b>",
        parse_mode="HTML",
        reply_markup=markup
    )


@bot.message_handler(commands=['clear'])
@check_registration
def clear(message):
    chat_id = message.chat.id
    user_message_id = message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    try:
        for message_id in range(user_message_id, user_message_id - 30, -1):
            try:
                bot.delete_message(chat_id, message_id)
            except:
                pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —É–¥–∞–ª–µ–Ω–æ
    except Exception as e:
        logger.error(e)
        bot.send_message(chat_id, f"<b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —á–∞—Ç–∞: {e}</b>", parse_mode='HTML')

@bot.message_handler(commands=['reference'])
@check_registration
def send_subject_choice(message):
    markup = types.InlineKeyboardMarkup(row_width=2)
    
    btn_math = types.InlineKeyboardButton('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üî¢', callback_data='math')
    btn_physics = types.InlineKeyboardButton('–§–∏–∑–∏–∫–∞üöó', callback_data='physics')
    btn_russian = types.InlineKeyboardButton('–†—É—Å—Å–∫–∏–π —è–∑—ã–∫üìí', callback_data='russian')
    btn_informatics = types.InlineKeyboardButton('–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞üíª', callback_data='informatics')
    btn_english = types.InlineKeyboardButton('–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫üóΩ', callback_data='english')
    btn_chemistry = types.InlineKeyboardButton('–•–∏–º–∏—èüß™', callback_data='chemistry')
    btn_biology = types.InlineKeyboardButton('–ë–∏–æ–ª–æ–≥–∏—èüåº', callback_data='biology')
    btn_literature = types.InlineKeyboardButton('–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞üìö', callback_data='literature')
    btn_history = types.InlineKeyboardButton('–ò—Å—Ç–æ—Ä–∏—èüé≠', callback_data='history')
    btn_social_studies = types.InlineKeyboardButton('–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µüìï', callback_data='social_studies')

    markup.add(btn_math, btn_physics, btn_russian, btn_informatics, btn_english, btn_chemistry, btn_biology, btn_literature, btn_history, btn_social_studies)

    bot.send_message(message.chat.id, "<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:</b>", reply_markup=markup, parse_mode='HTML')

@bot.message_handler(commands=['send_class'])
def func_sendimage_class(message):
    with db_lock:
        cur.execute("SELECT * FROM users WHERE user_id = ?", (message.from_user.id,))
        user_lst = cur.fetchone()
    if '_id' in user_lst[3]: 
        stiker = 'CAACAgIAAxkBAAEOHYpn8kvZrCgNpVs3ks0H6t8k0QR-kgACeAIAAladvQr8ugi1kX0cDDYE'
        markup = types.InlineKeyboardMarkup(row_width=2)
        btn_1 = types.InlineKeyboardButton('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µüñº', callback_data='image_teacher')
        btn_2 = types.InlineKeyboardButton('–¢–µ–∫—Å—Ç‚å®', callback_data='text_teacher')
        markup.add(btn_1, btn_2)
        bot.send_sticker(message.chat.id, stiker)
        bot.send_message(message.chat.id, '<b>–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ–º—É –∫–ª–∞—Å—Å—É‚ò∫</b>', reply_markup=markup, parse_mode='HTML')
    else:
        bot.send_message(message.chat.id, '<b>–£–ø—Å! –Ø –±—ã —Å —Ä–∞–¥–æ—Å—Ç—å—é –≤—ã–ø–æ–ª–Ω–∏–ª –∫–æ–º–∞–Ω–¥—É, –Ω–æ –º–æ–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Ä–∞–∑—Ä–µ—à–∞—é—Ç —ç—Ç–æ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è–º.üòÑ\n'
                        '–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å, –Ω–∞–ø–∏—à–∏—Ç–µ /help ‚Äî —è —Å —Ä–∞–¥–æ—Å—Ç—å—é –ø–æ–¥—Å–∫–∞–∂—É!</b>', parse_mode='HTML')
        return
@bot.message_handler(content_types=['photo'])
def handle_teacher_image(message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
    user_id = message.from_user.id
    if user_states.get(user_id, {}).get('state') == 'waiting_for_image':
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –∂–¥–µ–º —Ç–µ–∫—Å—Ç
            image_file_id = message.photo[-1].file_id
            user_states[user_id] = {
                'state': 'waiting_for_caption',
                'image': image_file_id
            }
            
            bot.send_message(
                message.chat.id,
                "<b>üì© –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é\n</b>"
                "<b>–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ —Ç–µ–∫—Å—Ç–∞</b>",
                reply_markup=types.ForceReply(selective=True),
                parse_mode='HTML'
            )
            
        except Exception as e:
            logger.error(e)
            bot.send_message(message.chat.id, "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>", parse_mode='HTML')
            user_states[user_id] = None
    elif user_states.get(user_id, {}).get('state') == 'waiting_for_caption':
        # –≠—Ç–æ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        bot.send_message(message.chat.id, "<b>‚ÑπÔ∏è –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</b>", parse_mode='HTML')
    else:
        return

@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get('state') == 'waiting_for_caption')
def handle_image_caption(message):
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –ø–æ–¥–ø–∏—Å–∏ –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
    user_id = message.from_user.id
    user_data = user_states.get(user_id, {})
    
    if message.text == '/skip':
        caption = None
    else:
        caption = message.text
    
    try:
        image_all_teacher_people(
            message=message,
            message_image=user_data['image'],
            caption=caption
        )
    except Exception as e:
        logger.error(e)
        bot.send_message(message.chat.id, "<b>‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>", parse_mode='HTML')
    finally:
        user_states[user_id] = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

def image_all_teacher_people(message, message_image, caption=None):
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        with db_lock:
            cur.execute("SELECT class_number, class_letter FROM users WHERE user_id = ?", 
                    (message.from_user.id,))
            teacher_data = cur.fetchone()
        if len(teacher_data[0]) == 4:
            class_number = teacher_data[0][:1]
            class_letter = teacher_data[1]
        else:
            class_number = teacher_data[0][:2]
            class_letter = teacher_data[1]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
        with db_lock:
            cur.execute("""
                SELECT user_id FROM users 
                WHERE class_number = ? AND class_letter = ? AND user_id != ?
                """, (class_number, class_letter, message.from_user.id))
            students = cur.fetchall()

        if not students:
            bot.send_message(message.chat.id, "<b>‚ÑπÔ∏è –í –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>", parse_mode='HTML')
            return

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º —É—á–µ–Ω–∏–∫–∞–º
        success_count = 0
        for student in students:
            try:
                bot.send_message(student[0], '<b>–í–∞–º –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è‚úâ</b>', parse_mode='HTML')
                bot.send_photo(
                    student[0],
                    message_image,
                    caption=caption if caption else "üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"
                )
                success_count += 1
            except Exception as e:
                logger.error(e)
        # –û—Ç—á–µ—Ç —É—á–∏—Ç–µ–ª—é
        bot.send_message(
            message.chat.id,
            f"<b>‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω {success_count} –∏–∑ {len(students)} —É—á–µ–Ω–∏–∫–æ–≤\n</b>"
            f"<b>–¢–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∏: {caption if caption else '–±–µ–∑ —Ç–µ–∫—Å—Ç–∞'}</b>",
            parse_mode='HTML'
        )

    except Exception as e:
        logger.error(e)
        bot.send_message(message.chat.id, "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ</b>", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data == 'image_teacher')
def callfunc_image_teacher(call):
    # –û—Ç–ø—Ä–∞–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    user_states[user_id] = {
        'state': 'waiting_for_image'
    }
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>üì© –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–ª–∞—Å—Å—É.</b>",
        parse_mode="HTML"
    )


@bot.callback_query_handler(func=lambda call: call.data == 'text_teacher')
def func_teacher_send_text(call):
    bot.answer_callback_query(call.id)
    
    msg = bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>üåü –û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî –∏ –≤–∞—à–∏ —É—á–µ–Ω–∏–∫–∏ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ –ø–æ–ª—É—á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ!</b>",
        parse_mode="HTML"
    )
    bot.register_next_step_handler(msg, process_teacher_text)

def process_teacher_text(message):
    try:
        teacher_text = message.text
        teacher_id = message.from_user.id
        if not teacher_text.strip():
            bot.send_message(message.chat.id, "<b>‚ùå –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º</b>", parse_mode='HTML')
            return
        with db_lock:
            cur.execute("SELECT class_number, class_letter FROM users WHERE user_id = ?", (teacher_id,))
            teacher_data = cur.fetchone()
        
        if len(teacher_data[0]) == 4:
            class_number = teacher_data[0][:1]
            class_letter = teacher_data[1]
        else:
            class_number = teacher_data[0][:2]
            class_letter = teacher_data[1]

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤
        with db_lock:
            cur.execute("""
                SELECT user_id FROM users 
                WHERE class_number = ? AND class_letter = ? AND user_id != ?
                """, (class_number, class_letter, teacher_id))
            students = cur.fetchall()

        if not students:
            bot.send_message(message.chat.id, "<b>‚ÑπÔ∏è –í –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>", parse_mode='HTML')
            return
        confirmation_markup = types.InlineKeyboardMarkup(row_width=2)
        confirmation_markup.add(
                types.InlineKeyboardButton("‚úÖ –û—Ç–ø—Ä–∞–≤–∏—Ç—å", callback_data=f"confirm_send:{message.message_id}"),
                types.InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_send")
            )

        bot.send_message(
                chat_id=message.chat.id,
                text=f"<b>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É:\n –ü–æ–ª—É—á–∞—Ç–µ–ª–µ–π –≤ –≤–∞—à–µ–º –∫–ª–∞—Å—Å–µ: {len(students)}</b>",
                reply_markup=confirmation_markup,
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        user_states[teacher_id] = {
                'text': teacher_text,
                'students': students,
                'original_message': message.message_id
            }
            
    except Exception as e:
        logger.error(e)
        bot.send_message(message.chat.id, "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞</b>", parse_mode='HTML')

@bot.callback_query_handler(func=lambda call: call.data.startswith('confirm_send:'))
def handle_confirmation(call):
    try:
        bot.answer_callback_query(call.id)
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        original_msg_id = int(call.data.split(':')[1])
        teacher_id = call.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        teacher_data = user_states.get(teacher_id)
        if not teacher_data:
            bot.send_message(call.message.chat.id, "<b>‚ùå –î–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∏</b>", parse_mode='HTML')
            return
            
        teacher_text = teacher_data['text']
        students = teacher_data['students']
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
        bot.delete_message(call.message.chat.id, call.message.message_id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        progress_msg = bot.send_message(
            call.message.chat.id,
            f"<b>‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {len(students)} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π...</b>",
            parse_mode='HTML'
        )
        
        # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        success = 0
        failed = 0
        failed_users = []
        
        for student in students:
            try:
                student_id = student[0]
                bot.send_message(
                    chat_id=student_id,
                    text=f"<b>üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∫–ª–∞—Å—Å–Ω–æ–≥–æ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è\n\n{teacher_text}</b>",
                    parse_mode='HTML'
                )
                success += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç—ã Telegram
                time.sleep(0.1)
            except Exception as e:
                failed += 1
                failed_users.append(student_id)
                logger.error(e)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = (
            f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success}\n"
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed}\n\n"
            f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è:\n{teacher_text}"
        )
        
        if failed > 0:
            report += f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–ª–µ–¥—É—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º: {', '.join(map(str, failed_users))}"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç –∏ —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
        bot.delete_message(call.message.chat.id, progress_msg.message_id)
        bot.send_message(call.message.chat.id, f'<b>{report}</b>', parse_mode='HTML')
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        del user_states[teacher_id]
        
    except Exception as e:
        logging.error(f"Error in handle_confirmation: {e}")
        bot.send_message(call.message.chat.id, "<b>‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>", parse_mode='HTML')


@bot.message_handler(commands=["calendar"])
@check_registration
def calendar_func(message):
    images = {
        "5": {"–ê": open("C:\Windows\System32\python file for VScode by Glebbasik\TelegramBot\calendarschool\pic_5_a.png", "rb"),
                "–ë": open("C:\Windows\System32\python file for VScode by Glebbasik\TelegramBot\calendarschool\pic_5_b.png", "rb"),
                "–í": open("C:\Windows\System32\python file for VScode by Glebbasik\TelegramBot\calendarschool\pic_5_v.png", "rb"),
                "–ì": open("C:\Windows\System32\python file for VScode by Glebbasik\TelegramBot\calendarschool\pic_5_g.png", "rb"),
                "–î": open("C:\Windows\System32\python file for VScode by Glebbasik\TelegramBot\calendarschool\pic_5_d.png", "rb")},
        "6": {"–ê": open("pic_6_a.png", "rb"),
                "–ë": open("pic_6_b.png", "rb"),
                "–í": open("pic_6_v.png", "rb"),
                "–ì": open("pic_6_g.png", "rb")},
        "7": {"–ê": open("pic_7_a.png", "rb"),
                "–ë": open("pic_7_b.png", "rb"),
                "–í": open("pic_7_v.png", "rb"),
                "–ì": open("pic_7_g.png", "rb")},
        "8": {"–ê": open("pic_8_a.png", "rb"),
                "–ë": open("pic_8_b.png", "rb"),
                "–í": open("pic_8_v.png", "rb"),
                "–ì": open("pic_8_g.png", "rb")},
        "9": {"–ê": open("pic_9_a.png", "rb"),
                "–ë": open("pic_9_b.png", "rb"),
                "–í": open("pic_9_v.png", "rb"),
                "–ì": open("pic_9_g.png", "rb")},
        "10": {"–ê": open("pic_10_a.png", "rb"),
                "–ë": open("pic_10_b.png", "rb")},
        "11": {"–ê": open("pic_11_a.png", "rb"),
                "–ë": open("pic_11_b.png", "rb")}
    }

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = message.from_user.id
    with db_lock:
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        user_data = cur.fetchone()

    if user_data: 
        class_number = user_data[3]  
        class_letter = user_data[4] 

        if class_number in images and class_letter in images[class_number]:
            bot.send_message(message.chat.id, "<b>–í–æ—Ç –≤–∞—à–µ —à–∫–æ–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞üòâ</b>", parse_mode="HTML")
            bot.send_photo(message.chat.id, images[class_number][class_letter])
        else:
            bot.send_message(message.chat.id, "<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–ª–∞—Å—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æüò¢</b>", parse_mode="HTML")


def notify_all_users(message_text):
    stiker_id = "CAACAgIAAxkBAAEN0n9n5D7j7cx0oCTQgnooixX3UtWHXAACIQ0AAiWx6UpCBrcao52KeDYE"
    with db_lock:
        cur.execute("SELECT user_id FROM users")
        all_users = cur.fetchall()
    for user in all_users:
        try:
            bot.send_sticker(user[0], sticker=stiker_id)
            bot.send_message(user[0], message_text, parse_mode="HTML")
        except Exception as e:
            logger.error(e)
@bot.message_handler(commands=['notify_schedule'])
def update_schedule(message):
    if message.from_user.id == int(os.getenv("ADMIN_ID")): #–≠—Ç–æ –º–æ–π ID  
        notify_all_users("<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –±—ã–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /calendar</b>")
        logger.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã")
    else:
        bot.send_message(message.chat.id, "<b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã</b>", parse_mode="HTML")



@bot.callback_query_handler(func=lambda call: call.data == "math")
def call_math_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup(row_width=1)
    button = types.InlineKeyboardButton("–ü—Ä–æ—Ç–æ—Ç–∏–ø—ã –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤", url="https://examer.ru/ege_po_matematike/teoriya")
    button2 = types.InlineKeyboardButton("–ö–∞–Ω–∞–ª —Å–æ –≤—Å–µ–º –º–∞—Ç–µ—Ä–∏–∞–ª–æ–º", url="https://t.me/pif112")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button, button2)
    markup.add(button_back)

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µüî¢</b>",
        parse_mode="HTML",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "physics")
def call_physics_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üëÜ", url="https://yandex.ru/tutor/subject/?subject_id=4")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button)
    markup.add(button_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ —Ñ–∏–∑–∏–∫–µüöó</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "russian")
def call_russian_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üëÜ", url="https://yandex.ru/tutor/subject/?subject_id=3")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button)
    markup.add(button_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ —Ä—É—Å—Å–∫–æ–º—É —è–∑—ã–∫—Éüìí</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "informatics")
def call_informatics_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üëÜ", url="https://education.yandex.ru/ege?utm_source=repetitor")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button)
    markup.add(button_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–µüíª</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "english")
def call_english_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üëÜ", url="https://yandex.ru/tutor/subject/?subject_id=12")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button)
    markup.add(button_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É —è–∑—ã–∫—ÉüóΩ</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "chemistry")
def call_chemistry_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üëÜ", url="https://chemege.ru/")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button)
    markup.add(button_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ —Ö–∏–º–∏–∏üß™</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "biology")
def call_biology_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üëÜ", url="https://yandex.ru/tutor/subject/?subject_id=8")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button)
    markup.add(button_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –±–∏–æ–ª–æ–≥–∏–∏üåº</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "literature")
def call_literature_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üëÜ", url="https://yandex.ru/tutor/subject/?subject_id=5")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button)
    markup.add(button_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µüìö</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "history")
def call_history_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üëÜ", url="https://yandex.ru/tutor/subject/?subject_id=10")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button)
    markup.add(button_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –∏—Å—Ç–æ—Ä–∏–∏üé≠</b>",
        parse_mode="HTML",
        reply_markup=markup
    )

@bot.callback_query_handler(func=lambda call: call.data == "social_studies")
def call_social_studies_query(call):
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏üëÜ", url="https://yandex.ru/tutor/subject/?subject_id=11")
    button_back = types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥üîÑ", callback_data="back_to_subjects")
    markup.add(button)
    markup.add(button_back)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç —Å –ø–æ–ª–µ–∑–Ω–æ–π —Ç–µ–æ—Ä–∏–µ–π –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –∫ —ç–∫–∑–∞–º–µ–Ω—É –ø–æ –æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏—éüìï</b>",
        parse_mode="HTML",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data == "back_to_subjects")
def back_to_subjects(call):

    bot.answer_callback_query(call.id)

    markup = types.InlineKeyboardMarkup(row_width=2)
    
    btn_math = types.InlineKeyboardButton("–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞üî¢", callback_data="math")
    btn_physics = types.InlineKeyboardButton("–§–∏–∑–∏–∫–∞üöó", callback_data="physics")
    btn_social_studies = types.InlineKeyboardButton("–û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µüìï", callback_data="social_studies")
    btn_history = types.InlineKeyboardButton("–ò—Å—Ç–æ—Ä–∏—èüé≠", callback_data="history")
    btn_literature = types.InlineKeyboardButton("–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞üìö", callback_data="literature")
    btn_biology = types.InlineKeyboardButton("–ë–∏–æ–ª–æ–≥–∏—èüåº", callback_data="biology")
    btn_chemistry = types.InlineKeyboardButton("–•–∏–º–∏—èüß™", callback_data="chemistry")
    btn_english = types.InlineKeyboardButton("–ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫üóΩ", callback_data="english")
    btn_informatics = types.InlineKeyboardButton("–ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞üíª", callback_data="informatics")
    btn_russian = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π —è–∑—ã–∫üìí", callback_data="russian")
    
    markup.add(
        btn_math, btn_physics, btn_social_studies, btn_history,
        btn_literature, btn_biology, btn_chemistry, btn_english,
        btn_informatics, btn_russian
    )

    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:</b>",
        parse_mode="HTML",
        reply_markup=markup
    )



@bot.message_handler(commands=['list_users'])
def users_list_func(message):
    with db_lock:
        cur.execute("SELECT user_id, username, class_number, class_letter FROM users")
        list_users = cur.fetchall()

    if message.from_user.id == int(os.getenv("ADMIN_ID")):  # –ü—Ä–æ–≤–µ—Ä–∫–∞ ID –∞–¥–º–∏–Ω–∞
        if not list_users:
            bot.send_message(message.chat.id, "<b>–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>", parse_mode="HTML")
            return
            
        user_list_message = "<b>–°–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:</b>\n"
        for i, user in enumerate(list_users, start=1):
            user_id, username, class_num, class_letter = user
            username_display = f"{username}"
            class_info = f"{class_num}{class_letter}" if class_num and class_letter else "–∫–ª–∞—Å—Å –Ω–µ —É–∫–∞–∑–∞–Ω"
            
            user_list_message += (
                f"{i}. ID: {user_id}\n"
                f"   –ò–º—è: {username_display}\n"
                f"   –ö–ª–∞—Å—Å: {class_info}\n\n"
            )
        
        bot.send_message(message.chat.id, f'<b>{user_list_message}</b>', parse_mode="HTML")
        logger.info("–ê–¥–º–∏–Ω –±–æ—Ç–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ –ø–æ—Å–º–æ—Ç—Ä–µ–ª —Å–ø–∏—Å–æ–∫ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    else:
        bot.send_message(message.chat.id, "<b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã</b>", parse_mode="HTML")

#–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
def is_user_registered(user_id):
    with db_lock:
        cur.execute('SELECT * FROM users WHERE user_id = ?', (user_id,))
        result = cur.fetchone()
    if result is None:
        return False
    else:
        user_id, username, password, class_number, class_letter = result
        return user_id is not None and username is not None and password is not None and class_number is not None and class_letter is not None

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–≤—ã—Ö–æ–¥)
def logout_user(user_id):
    with db_lock:
        cur.execute('DELETE FROM users WHERE user_id = ?', (user_id,))
        conn.commit()

# –ö–æ–º–∞–Ω–¥–∞ /exit
@bot.message_handler(commands=['exit'])
@check_registration
def handle_exit(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    btn_1 = types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—åüóë", callback_data="delete_ak")
    btn_2 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥üîÑ", callback_data="back_to_ak")
    markup.add(btn_1, btn_2)
    user_id = message.from_user.id 
    if is_user_registered(user_id):
        bot.send_message(message.chat.id, "<b>–í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ—Å—å —É–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ —É–¥–∞–ª–µ–Ω—ã. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ.</b>", reply_markup=markup, parse_mode="HTML")
    else:
        bot.send_message(message.chat.id, "<b>‚ùå–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã</b>", parse_mode="HTML") 


@bot.callback_query_handler(func=lambda call: call.data == 'delete_ak')
def delete_ak_func(call):
    bot.answer_callback_query(call.id)
    user_id = call.from_user.id
    with db_lock:
        cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
        name = cur.fetchone()
    logout_user(user_id=user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –∏–º–µ–Ω–µ–º {name[1]} —É–¥–∞–ª–∏–ª –∞–∫–∫–∞—É–Ω—Ç")
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç</b>",
        parse_mode="HTML"
    )

@bot.callback_query_handler(func=lambda call: call.data == 'back_to_ak')
def back_to_ak_func(call):
    bot.answer_callback_query(call.id)
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>‚ùå–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML"
    )

@bot.message_handler(commands=['support'])
def support_func(message):
    stiker = 'CAACAgIAAxkBAAEOTtNn-2p-u2EekVrh23Xeelu3bn08_gAC_xsAAtdYaUg5zhOM-zad9zYE'
    bot.send_sticker(
        chat_id=message.chat.id,
        sticker=stiker
    )

    bot.send_message(
        chat_id=message.chat.id,
        text='<b>–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ –≤–æ–∑–Ω–∏–∫—à–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏</b>\n\n'
                '<b>–ú—ã —Å–¥–µ–ª–∞–µ–º –≤—Å—ë –≤–æ–∑–º–æ–∂–Ω–æ–µ, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –≤–∞–º –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ.</b>',
        parse_mode='HTML'
    )
    bot.register_next_step_handler(message, support_func_2)
def support_func_2(message):
    text_support = message.text
    admin_chat_id = int(os.getenv("ADMIN_ID"))
    try:
        if text_support in ("/start", "/clear", "/help", "/reference", "/exit", "/calendar", "/support", '/ask_anon', '/my_questions', '/send_class'):
            bot.send_message(message.chat.id, '<b>–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∑–∞–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ</b>', parse_mode='HTML')
        else:
            bot.send_message(message.chat.id, '<b>–°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ!\n</b>'
                            '<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ –≤ –∫—É—Ä—Å–µ –∏ —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è. –°–ø–∞—Å–∏–±–æ!</b>', parse_mode='HTML')
            bot.send_message(
                chat_id=admin_chat_id,
                text=f'<b>üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.first_name}\n\n</b>'
                    f'<b>ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {message.chat.id}</b>\n'
                    f'<b>–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {text_support}</b>',
                parse_mode='HTML'
            )
            
    except Exception as e:
        logger.error(e)

@bot.message_handler(commands=['support_answer'])
def support_answer_func(message):
    try:
        if message.from_user.id == int(os.getenv("ADMIN_ID")):
            bot.send_message(
                chat_id=message.chat.id,
                text='<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –º–æ–π –≥–æ—Å–ø–æ–¥–∏–Ωüôá‚Äç‚ôÇÔ∏è\n\n</b>'
                    '<b>–í–≤–µ–¥–∏—Ç–µ id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ</b>',
                parse_mode='HTML'
            )
            bot.register_next_step_handler(message, support_answer_func_2)
        else:
            bot.send_message(
                chat_id=message.chat.id,
                text='<b>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ãüòî</b>',
                parse_mode='HTML'
            )
    except Exception as e:
        logger.error(e)

def support_answer_func_2(message):
    admin_send_user = int(message.text)
    try:
        bot.send_message(
            chat_id=message.chat.id,
            text='<b>–û—Ç–ª–∏—á–Ω–æ!\n\n–ì–æ—Å–ø–æ–¥–∏–Ω —Ç–µ–ø–µ—Ä—å –ø—Ä–æ—à—É –≤–∞—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é</b>',
            parse_mode='HTML'
        )
        bot.register_next_step_handler(
            message,
            lambda msg: support_answer_func_3(message=msg, user_id=admin_send_user)
        )
    except Exception as e:
        logger.error(e)

def support_answer_func_3(message, user_id):
    try:
        bot.send_message(
            chat_id=user_id,
            text=f"<b>üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:\n\n{message.text}</b>",
            parse_mode='HTML'
        )
        bot.reply_to(message, "‚úî –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
    except Exception as e:
        logger.error(e)
@bot.message_handler(commands=['help'])
@check_registration
def main_help(message):
    user_id = message.from_user.id
    
    if user_id == int(os.getenv("ADMIN_ID")):
        help_text = """
    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∞:</b>

    /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞üîÑ
    /clear - –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Çüóë
    /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º‚Ñπ
    /reference - –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüóÉ
    /calendar - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤üîπ
    /send_class - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å—Éüì©
    /support - –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚úâ
    /ask_anon - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é‚úâ
    /my_questions - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—èüì®
    /exit - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç‚ùå
    /list_users - –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–πüë• 
    /notify_schedule - –†–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–πüîî 
    /support_answer - –û—Ç–≤–µ—Ç—ã –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏—èüí¨ 
    """
    elif is_teacher(user_id):
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π
        help_text = """
    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π:</b>

    /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞üîÑ
    /clear - –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Çüóë
    /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º‚Ñπ
    /reference - –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüóÉ
    /calendar - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤üîπ
    /send_class - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–ª–∞—Å—Å—Éüì©
    /support - –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚úâ
    /my_questions - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∞–Ω–æ–Ω–∏–º–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—èüì®
    /exit - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç‚ùå
    """
    else:
        # –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
        help_text = """
    <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤:</b>

    /start - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞üîÑ
    /clear - –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Çüóë
    /help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞‚Ñπ
    /reference - –£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ãüóÉ
    /calendar - –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Ä–æ–∫–æ–≤üîπ
    /support - –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–µ–π‚úâ
    /ask_anon - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é‚úâ
    /exit - –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç‚ùå
    """
    bot.send_message(message.chat.id, help_text, parse_mode="HTML")


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–Ω–æ–Ω–∏–º–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@bot.message_handler(commands=['ask_anon'])
@check_registration
def ask_anon_question(message):
    if is_teacher(message.from_user.id):
        bot.send_message(message.chat.id, "<b>–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∞–º.</b>", parse_mode="HTML")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–∏—Ç–µ–ª–µ–π
    with db_lock:
        cur.execute("SELECT user_id, username FROM users WHERE class_number LIKE '%/_id' ESCAPE '/'")
        teachers = cur.fetchall()
    
    if not teachers:
        bot.send_message(message.chat.id, "<b>–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π.</b>", parse_mode="HTML")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    for teacher in teachers:
        btn = types.InlineKeyboardButton(
            f"{teacher[1]}", 
            callback_data=f"select_teacher_{teacher[0]}"
        )
        markup.add(btn)
    
    bot.send_message(
        message.chat.id, 
        "<b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>", 
        reply_markup=markup, 
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–∏—Ç–µ–ª—è
@bot.callback_query_handler(func=lambda call: call.data.startswith('select_teacher_'))
def select_teacher(call):
    bot.answer_callback_query(call.id)
    teacher_id = int(call.data.split('_')[2])
    user_states[call.from_user.id] = {
        'state': 'waiting_anon_question',
        'teacher_id': teacher_id
    }
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å, –∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –µ–≥–æ –≤–∞—à–µ–º—É —É—á–∏—Ç–µ–ª—é\n\n–í–æ–ø—Ä–æ—Å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–Ω–æ–Ω–∏–º–Ω–æüòâ</b>",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –≤–æ–ø—Ä–æ—Å–∞
@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get('state') == 'waiting_anon_question')
def process_anon_question(message):
    user_data = user_states[message.from_user.id]
    teacher_id = user_data['teacher_id']
    question_text = message.text
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å –≤ –±–∞–∑—É
    with db_lock:
        cur.execute(
            "INSERT INTO anonymous_questions (from_user_id, to_teacher_id, question_text) VALUES (?, ?, ?)",
            (message.from_user.id, teacher_id, question_text)
        )
        conn.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–∏—Ç–µ–ª—é
    try:
        bot.send_message(
            teacher_id,
            f"<b>üì® –£ –≤–∞—Å –Ω–æ–≤–æ–µ –∞–Ω–æ–Ω–∏–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n\n{question_text}",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å —É—á–∏—Ç–µ–ª—é: {e}")
    
    bot.send_message(
        message.chat.id,
        "<b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –£—á–∏—Ç–µ–ª—å —É–∂–µ –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µüòä</b>",
        parse_mode="HTML"
    )
    
    user_states.pop(message.from_user.id, None)

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—á–∏—Ç–µ–ª–µ–π - –ø—Ä–æ—Å–º–æ—Ç—Ä –≤–æ–ø—Ä–æ—Å–æ–≤
@bot.message_handler(commands=['my_questions'])
def show_questions(message):
    if not is_teacher(message.from_user.id):
        bot.send_message(message.chat.id, "<b>–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —É—á–∏—Ç–µ–ª—è–º.</b>", parse_mode="HTML")
        return
    with db_lock:
        cur.execute("""
            SELECT question_id, question_text, timestamp 
            FROM anonymous_questions 
            WHERE to_teacher_id = ? AND is_answered = 0
            ORDER BY timestamp DESC
        """, (message.from_user.id,))
        
        questions = cur.fetchall()
    
    if not questions:
        bot.send_message(message.chat.id, "<b>–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π</b>", parse_mode="HTML")
        return
    
    markup = types.InlineKeyboardMarkup(row_width=1)
    for number, q in enumerate(questions):
        btn = types.InlineKeyboardButton(
            f"–í–æ–ø—Ä–æ—Å üîπ{number + 1} ({q[2][:10]})",
            callback_data=f"view_question_{q[0]}_{number + 1}"
        )
        markup.add(btn)
    
    bot.send_message(
        message.chat.id,
        "<b>–£ –≤–∞—Å –µ—Å—Ç—å –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è:</b>",
        reply_markup=markup,
        parse_mode="HTML"
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@bot.callback_query_handler(func=lambda call: call.data.startswith('view_question_'))
def view_question(call):
    question_id = int(call.data.split('_')[2])
    question_number = int(call.data.split('_')[3])
    with db_lock:
        cur.execute("""
            SELECT question_text, timestamp 
            FROM anonymous_questions 
            WHERE question_id = ?
        """, (question_id,))
        
        question = cur.fetchone()
    
    if not question:
        bot.answer_callback_query(call.id, "–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    bot.answer_callback_query(call.id)
    markup = types.InlineKeyboardMarkup()
    answer_btn = types.InlineKeyboardButton(
        "–û—Ç–≤–µ—Ç–∏—Ç—å ‚úèÔ∏è", 
        callback_data=f"answer_question_{question_id}"
    )
    markup.add(answer_btn)

    date_time_str = question[1][:16]

    dt = datetime.strptime(date_time_str, '%Y-%m-%d %H:%M')

    new_dt = dt + timedelta(hours=5)

    new_date_time_str = new_dt.strftime('%Y-%m-%d %H:%M')

    bot.edit_message_text( 
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text=f"<b>–í–æ–ø—Ä–æ—Å üîπ{question_number}:</b>\n\n{question[0]}\n\n<i>{new_date_time_str}</i>",
        reply_markup=markup,
        parse_mode="HTML"
    )

# –û—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å
@bot.callback_query_handler(func=lambda call: call.data.startswith('answer_question_'))
def answer_question(call):
    bot.answer_callback_query(call.id)

    question_id = int(call.data.split('_')[2])
    user_states[call.from_user.id] = {
        'state': 'waiting_answer',
        'question_id': question_id
    }
    
    bot.edit_message_text(
        chat_id=call.message.chat.id,
        message_id=call.message.message_id,
        text="<b>–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>",
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞
@bot.message_handler(func=lambda m: user_states.get(m.from_user.id, {}).get('state') == 'waiting_answer')
def process_answer(message):
    user_data = user_states[message.from_user.id]
    question_id = user_data['question_id']
    answer_text = message.text
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–æ–ø—Ä–æ—Å–µ
    with db_lock:
        cur.execute("""
            SELECT from_user_id, question_text 
            FROM anonymous_questions 
            WHERE question_id = ?
        """, (question_id,))
        
        question = cur.fetchone()
    
    if not question:
        bot.send_message(message.chat.id, "<b>–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>", parse_mode="HTML")
        user_states.pop(message.from_user.id, None)
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ
    with db_lock:
        cur.execute("""
            UPDATE anonymous_questions 
            SET is_answered = 1, answer_text = ? 
            WHERE question_id = ?
        """, (answer_text, question_id))
        conn.commit()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É
    try:
        bot.send_message(
            question[0],
            f"<b>üì© –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –∞–Ω–æ–Ω–∏–º–Ω—ã–π –≤–æ–ø—Ä–æ—Å:</b>\n\n"
            f"<b>–í–∞—à –≤–æ–ø—Ä–æ—Å: {question[1]}</b>\n\n"
            f"<b>–û—Ç–≤–µ—Ç: {answer_text}</b>",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É: {e}")
    
    bot.send_message(
        message.chat.id,
        "<b>–í–∞—à –æ—Ç–≤–µ—Ç –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–µ–Ω–∏–∫—É!</b>",
        parse_mode="HTML"
    )
    
    user_states.pop(message.from_user.id, None)


@bot.message_handler()
def info_for_str(message):
    if type(message.text.lower()) == str:
        bot.send_message(message.chat.id, '<b>–£–ø—Å, –Ω–µ –ø–æ–Ω–∏–º–∞—é —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ªüò•</b>', parse_mode='HTML')

while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        logger.error(e)
